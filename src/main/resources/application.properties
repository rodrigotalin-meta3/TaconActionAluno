# TODO: (REVIEW) Using H2 in-memory DB for local development and tests
# New choice: use an embedded H2 database to allow repository operations during dev/tests without external DB
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# TODO: (REVIEW) Datasource configuration chosen to be ephemeral and keep DB alive for the JVM lifetime
# This mirrors typical dev/test setup (no external dependencies). DB_CLOSE_DELAY=-1 keeps DB until JVM stops.
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# TODO: (REVIEW) Use Hibernate dialect for H2 and allow schema auto-update to simplify migration/dev
# ddl-auto=update is chosen to preserve simple schema evolution during local development and tests.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update

# Helpful defaults for development
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Ensure SQL initialization runs in dev/test; include both legacy and newer property names for compatibility
spring.datasource.initialization-mode=always
spring.sql.init.mode=always

# Logging for SQL (can be useful during migration debugging)
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# TODO: (REVIEW) Legacy UI logic (user status mapping, operator lists) is not migrated here.
# The DB and JPA settings above provide the necessary environment for backend endpoints and repositories
# to implement equivalent business logic (e.g., persisting user status 'A'/'I' and operator associations).