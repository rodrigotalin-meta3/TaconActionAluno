filetype
# MIGRATION_CHECKLIST

- [x] Task: Migrate legacy DAO method executePreparedQuery(...) into new LegacyDao abstraction and implementations.
  - WHY: centralize JDBC PreparedStatement creation, preserve legacy behaviour (store pstmt in DAO instance, wrap SQLExceptions into unchecked exception), and allow gradual migration of callers.
  - WHEN: performed during executePreparedQuery migration step.
  - WHO: migration script / developer.

Changes performed (files created/modified)
1. Verified/ensured interface declaration:
   - src/main/java/br/com/meta3/java/scaffold/domain/services/LegacyDao.java
     - Confirmed method declared:
       PreparedStatement executePreparedQuery(String sql) throws SQLException;
   - Decision comment:
     // TODO: (REVIEW) Consider changing the interface to return a wrapper that enforces close semantics to avoid resource leaks.

2. Implemented executePreparedQuery in LegacyDaoImpl:
   - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImpl.java
     - Behavior:
       - Ensures connection exists (connect(null) fallback to Spring-managed DataSource when needed).
       - Calls Connection.prepareStatement(sql) and stores it into instance field 'pstmt'.
       - Returns the PreparedStatement to caller.
       - Logs full context on SQLException and wraps it into an UnsupportedOperationException with the legacy message "Erro ao preparar a query!" to keep parity with original code.
     - Decision comments added to file:
       // TODO: (REVIEW) Consider returning a managed PreparedStatement wrapper that auto-closes when used,
       //         to reduce the risk of callers forgetting to call disconnect().
       // NOTE: Preserved legacy semantics: pstmt stored as instance field to mimic original DAO stateful behaviour.

3. Implemented adapter methods delegating to LegacyDao:
   - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapter.java
     - Added/exposed methods:
       - executarPreparedQuery(String query) and executePreparedQuery(String query)
       - prepareInsert / prepareUpdate wrappers already present
     - Behavior:
       - Delegates to LegacyDao.executePreparedQuery(...)
       - Stores returned PreparedStatement in adapter.pstmt
       - Catches SQLException and other runtime exceptions and wraps them into UnsupportedOperationException
         with a legacy-style message including underlying exception message for better diagnostics.
     - Decision comments added:
       // TODO: (REVIEW) Remove this adapter once all callers are migrated to LegacyDao or JdbcTemplate to reduce indirection.

4. Updated legacy callers to use the LegacyDao abstraction:
   - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImpl.java
     - Replaced direct Connection.prepareStatement(...) usages with legacyDao.executePreparedQuery(sql)
     - Ensures lifecycle: legacyDao.connect(...) before operations and legacyDao.disconnect() in finally blocks.
     - Decision comments:
       // TODO: (REVIEW) Consider refactoring to JdbcTemplate/RowMapper for new queries rather than manual ResultSet handling.

5. Tests added/updated to validate behaviour:
   - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImplExecutePreparedQueryTest.java
     - Tests:
       - executePreparedQuery returns PreparedStatement created by Connection and assigns to private 'pstmt' field.
       - executePreparedQuery wraps SQLException into UnsupportedOperationException and leaves 'pstmt' null.
     - Decision comments:
       // NOTE: Tests use reflection to validate private state to ensure legacy-like behaviour is preserved for other migrated code.

Risk / Security / Maintenance notes
- // TODO: (SECURITY) Several legacy callers inline user-supplied collections into SQL strings. Future work: migrate those callers to NamedParameterJdbcTemplate with collection binding to avoid SQL injection.
- // TODO: (MAINTENANCE) Storing JDBC resources (conn, stmt, pstmt, rs) as instance fields preserves legacy semantics but increases the risk of resource leaks if callers forget disconnect(); consider adding AutoCloseable wrappers and refactoring callers to try-with-resources.
- // TODO: (REVIEW) Convert ResultSet-returning legacy methods to use JdbcTemplate RowMapper or JPA where possible to modernize codebase and reduce manual resource handling.

Files touched (summary)
- Modified: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImpl.java
  - Implemented executePreparedQuery(...) with logging and exception wrapping.
- Modified: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapter.java
  - Added executarPreparedQuery / executePreparedQuery delegations and state preservation.
- Modified: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImpl.java
  - Replaced direct Connection.prepareStatement usages with legacyDao.executePreparedQuery(...)
- Verified: src/main/java/br/com/meta3/java/scaffold/domain/services/LegacyDao.java
  - Interface contains executePreparedQuery declaration.
- Created/Verified tests: src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImplExecutePreparedQueryTest.java

Tracking / Next steps
- [ ] Expand LegacyDao interface to include safer helpers (e.g., prepareQuery that accepts SQL and parameters and returns mapped results).
  // Rationale: minimize exposure of raw ResultSet/PreparedStatement to application/service layers.
- [ ] Gradually refactor callers to use JdbcTemplate / NamedParameterJdbcTemplate where appropriate.
  // Rationale: improve readability, safety, and resource management.
- [ ] Consider adding integration test that asserts disconnect() closes resources under normal and error conditions.
  // Rationale: ensure resource cleanup semantics remain correct across database types.

Change log (chronological)
- Entry: executePreparedQuery migration completed
  - Modified files: LegacyDaoImpl.java, LegacyDaoAdapter.java, AlunoDaoImpl.java
  - Tests: LegacyDaoImplExecutePreparedQueryTest.java added/verified
  - Notes:
    // Decision: preserve legacy behaviour (instance 'pstmt' field & UnsupportedOperationException wrapping) to ensure minimal changes for ported code that expects this behaviour.
    // Decision: rely on Spring-managed DataSource fallback when no specific dbType is provided to ease local development and tests.

# -------------------------------------------------------------------
# NEW ENTRY: Migration of small legacy prepareUpdate -> prepareInsert shim
# -------------------------------------------------------------------

- [x] Task: Migrate/record small legacy prepareUpdate -> prepareInsert shim and associated tests.
  - WHY: Some legacy callers invoked a void-style prepareUpdate(insert) or relied on prepareUpdate to internally reuse the insert-preparation path. To preserve compatibility while centralizing PreparedStatement creation we introduced a small shim that delegates update preparation to the insert preparation path and provided tests to validate behaviour.
  - WHEN: performed during prepareUpdate shim migration step.
  - WHO: migration script / developer.

Summary of changes performed (append-only, avoid overwriting prior items):
1. Adapter shim methods added/retained:
   - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapter.java
     - Added/kept:
       - public void prepareUpdateVoid(String insert) { prepareUpdate(insert); }
       - public void prepareUpdateLegacy(String insert) { prepareInsert(insert); }
     - Rationale:
       // TODO: (REVIEW) The void-style shim preserves legacy callers that expected no return value and relied on adapter internal state (pstmt). Keep as deprecated shims until call sites are migrated.
     - Behavior:
       - preserve legacy semantics: adapter stores PreparedStatement in this.pstmt when delegating to LegacyDao methods.
       - choose to delegate to prepareInsert for prepareUpdateLegacy to mimic historical implementations that reused the insert path for updates.

2. LegacyDaoImpl.prepareUpdate delegates to prepareInsert:
   - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImpl.java
     - Behavior:
       - prepareUpdate(sql) returns prepareInsert(sql) result (delegation), preserving the instance 'pstmt' assignment.
     - Decision comment:
       // TODO: (REVIEW) Deprecate prepareUpdate alias after migrating callers to executePreparedQuery or prepareInsert directly.

3. Tests added/verified:
   - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyPrepareUpdateMigrationTest.java
     - Tests:
       - testPrepareUpdate_delegatesToPrepareInsert_andSetsPstmt:
         * Verifies prepareUpdate returns the PreparedStatement produced by Connection.prepareStatement
         * Verifies private 'pstmt' field was set via reflection
         * Verifies DataSource.getConnection() and Connection.prepareStatement(...) invoked
       - testPrepareUpdate_throwsUnsupportedOperationException_onSQLException:
         * Verifies SQLException from Connection.prepareStatement is wrapped into UnsupportedOperationException
         * Verifies 'pstmt' remains null if preparation fails
     - Rationale:
       // TODO: (REVIEW) These tests use reflection to validate private state to ensure migrated code relying on dao instance state still functions. Consider exposing test-only accessors or refactoring callers to avoid needing reflection.

Files touched (summary for this task)
- Modified: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapter.java
  - Added void-style shims prepareUpdateVoid / prepareUpdateLegacy and ensured they delegate to existing methods, preserving adapter.pstmt state.
- Modified: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImpl.java
  - Ensure prepareUpdate delegates to prepareInsert (already implemented as delegation).
- Added/Verified tests:
  - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyPrepareUpdateMigrationTest.java
    - Validates delegation, pstmt assignment, and exception wrapping behavior.

Risk / Security / Maintenance notes for this shim
- // TODO: (MAINTENANCE) Void-style shims encourage legacy, stateful usage patterns. Plan to deprecate and remove after migrating callers to PreparedStatement-returning methods.
- // TODO: (SECURITY) Keep testing to ensure that delegating prepared statements does not inadvertently change parameter binding or SQL used by callers.
- // TODO: (REVIEW) Consider adding a deprecation logging notice when shim methods are invoked to help locate legacy call sites that need migration.

Tracking / Next steps specific to shim
- [x] Add deprecation comment to prepareUpdateLegacy/prepareUpdateVoid to indicate they are migration shims.
  // TODO: (REVIEW) Log warnings when shim methods are called to help locate legacy call sites.
- [ ] Replace remaining call sites that use prepareUpdate(insert) void-style with prepareInsert/executePreparedQuery and remove shim methods.
- [ ] Add integration test that exercises actual legacy callers migrating from void-style to PreparedStatement-returning calls to ensure no regressions.

Change log (entry)
- Entry: prepareUpdate -> prepareInsert shim migration recorded
  - Modified files: LegacyDaoAdapter.java (shims), LegacyDaoImpl.java (prepareUpdate delegates), LegacyPrepareUpdateMigrationTest.java (tests added/verified)
  - Tests: LegacyPrepareUpdateMigrationTest.java added/verified
  - Notes:
    // Decision: Keep shim methods for backward compatibility and to minimize immediate risk; mark as deprecated for future removal.
    // Decision: Use prepareInsert delegation for update preparation to match historical implementations and to centralize PreparedStatement creation.

# -------------------------------------------------------------------
# NEW ENTRY: Migration of prepareInsert centralization and adapter handling
# -------------------------------------------------------------------

- [x] Task: Migrate and document prepareInsert centralization into LegacyDao/Adapter and ensure callers use it consistently.
  - WHY:
    - Centralize INSERT PreparedStatement creation in LegacyDaoImpl.prepareInsert so all legacy insert operations use a single, testable code path.
    - Preserve legacy semantics for callers and adapters:
      * LegacyDaoImpl.prepareInsert stores the PreparedStatement in the instance field 'pstmt' for compatibility with code expecting DAO stateful fields.
      * LegacyDaoAdapter.prepareInsert delegates to LegacyDao.prepareInsert and wraps checked exceptions into UnsupportedOperationException with a legacy-style message.
    - Ensure infrastructure callers (e.g., AlunoDaoImpl.inserirAluno) use legacyDao.prepareInsert(...) rather than directly calling Connection.prepareStatement(...), to keep connection/driver handling centralized and easily configurable.
  - WHEN: performed during prepareInsert centralization migration step.
  - WHO: migration script / developer.

Changes performed
1. LegacyDaoImpl.prepareInsert implementation (already present/verified):
   - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImpl.java
     - Behavior:
       - Ensures connection exists (connect(null) fallback).
       - Calls Connection.prepareStatement(sql), assigns resulting PreparedStatement to private field 'pstmt'.
       - Logs SQLException context and wraps it into UnsupportedOperationException with message "Erro ao preparar o insert!\n\n" + ex.getMessage() to match legacy messages.
     - Decision comments:
       // TODO: (REVIEW) Consider returning a wrapper that tracks resource ownership to make callers less error-prone.
       // NOTE: prepareInsert intentionally mirrors existing legacy error message text for easier debugging and to match tests.

2. LegacyDaoAdapter.prepareInsert delegation and semantics:
   - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapter.java
     - Behavior:
       - Calls legacyDao.prepareInsert(insert);
       - Stores returned PreparedStatement in adapter.pstmt to preserve legacy instance state visible to callers of the adapter.
       - Converts SQLException/RuntimeException into UnsupportedOperationException preserving a detailed message for diagnostics.
     - Decision comments:
       // TODO: (REVIEW) Add deprecation warning log when this adapter method is invoked to help identify call sites to migrate away from adapter stateful usage.

3. AlunoDaoImpl.inserirAluno updated to use prepareInsert:
   - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImpl.java
     - Behavior:
       - Calls legacyDao.connect("oracle") prior to preparing the INSERT.
       - Uses legacyDao.prepareInsert(sql) to obtain PreparedStatement for binding INSERT parameters.
       - Binds parameters defensively (safeString trimming, date conversion LocalDate->java.sql.Date, fallback parsing for string dates).
       - Calls pstmt.executeUpdate() and maps >0 result to legacy success code 1, else 0.
       - Ensures legacyDao.disconnect() in finally block to close resources.
     - Decision comments:
       // TODO: (REVIEW) Confirm legacy DB table/column names and types for production schema before expanding mapped columns.

Tests added / updated
1. LegacyDaoImplPrepareInsertTest.java
   - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImplPrepareInsertTest.java
     - Verifies:
       - prepareInsert returns PreparedStatement produced by Connection.prepareStatement when DataSource provides Connection.
       - LegacyDaoImpl.pstmt private field is assigned to the PreparedStatement.
       - When Connection.prepareStatement throws SQLException, prepareInsert wraps into UnsupportedOperationException with legacy-style message and leaves pstmt null.
     - Decision comments:
       // NOTE: Tests use reflection to assert internal state (pstmt) to guarantee legacy compatibility; consider exposing test hooks if reflection becomes brittle.

2. AlunoDaoImplTest.java (uses LegacyDao.prepareInsert)
   - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImplTest.java
     - Verifies:
       - AlunoDaoImpl.inserirAluno obtains PreparedStatement through legacyDao.prepareInsert and performs parameter bindings (trimmed strings).
       - LocalDate dataNascimento binding converted to java.sql.Date and bound correctly.
       - Null dataNascimento results in pstmt.setNull(..., java.sql.Types.DATE).
       - Ensures legacyDao.connect("oracle") and legacyDao.disconnect() are invoked.
     - Decision comments:
       // TODO: (REVIEW) Add tests for SQLException flows (prepareInsert/executeUpdate throwing) to assert return code 0 behavior.

Risk / Security / Maintenance notes
- // TODO: (SECURITY) Inline-list SQL patterns remain risky in other methods; do NOT introduce similar patterns when adding prepareInsert usages. Prefer parameter binding and NamedParameterJdbcTemplate where possible.
- // TODO: (MAINTENANCE) Centralizing prepareInsert reduces duplication but retains stateful PreparedStatement in DAO instance which risks resource leaks if disconnect() is not called. Consider evolving to managed wrappers or returning a small helper that encapsulates binding + execution, ensuring resources are closed automatically.

Files touched (summary)
- Verified/modified: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImpl.java
  - prepareInsert implemented/verified to set pstmt and wrap exceptions.
- Modified: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapter.java
  - prepareInsert delegates to LegacyDao.prepareInsert and wraps exceptions into UnsupportedOperationException with legacy message.
- Modified: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImpl.java
  - inserirAluno updated to use legacyDao.prepareInsert(sql) for INSERT operations and to call legacyDao.connect/disconnect lifecycle.
- Added/Verified tests:
  - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImplPrepareInsertTest.java
  - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImplTest.java (already present and verifying prepareInsert usage)

Next steps / Deprecation plan for stateful shims
- [ ] Add deprecation logging to LegacyDaoAdapter methods that expose stateful fields (prepareInsert/prepareUpdate/executePreparedQuery) so runtime usage can be monitored and migration prioritized.
  // TODO: (REVIEW) Emit WARN-level logs indicating deprecated stateful adapter method was invoked and include call site info where possible.
- [ ] Replace remaining call sites that rely on adapter.pstmt or adapter.rs with explicit PreparedStatement usage returned and handled by callers, or better, migrate callers to JdbcTemplate / NamedParameterJdbcTemplate to avoid low-level resource handling.
- [ ] Consider adding an integration test that performs a full insert against a configured test database (H2) to validate column mappings and transaction semantics end-to-end.
- [ ] After sufficient coverage and removal of all call sites depending on adapter state, mark adapter shims as @Deprecated and schedule removal in a later major version.

Change log (entry)
- Entry: prepareInsert centralization migration recorded
  - Modified files: LegacyDaoImpl.java (prepareInsert), LegacyDaoAdapter.java (prepareInsert delegation), AlunoDaoImpl.java (use prepareInsert)
  - Tests: LegacyDaoImplPrepareInsertTest.java added/verified; AlunoDaoImplTest.java uses prepareInsert (verified)
  - Notes:
    // Decision: Preserve legacy exception messages and instance 'pstmt' assignment to minimize behavioral diffs during migration.
    // Decision: Centralize PreparedStatement preparation for INSERTs to simplify future refactors and testing.

# -------------------------------------------------------------------
# NEW ENTRY: prepareInsert migration step - quick reference & verification
# -------------------------------------------------------------------

- SUMMARY:
  - This quick reference records the concrete prepareInsert migration step and explicit verification status of tests that validate the behavior.
  - Purpose: provide an easily scannable checklist for reviewers and CI owners to confirm where prepareInsert logic was centralized and which tests validate it.

- FILES INVOLVED (paths relative to repo root):
  - Implementation / Infra:
    - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImpl.java
    - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapter.java
    - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImpl.java
  - Domain / Abstraction:
    - src/main/java/br/com/meta3/java/scaffold/domain/services/LegacyDao.java
    - src/main/java/br/com/meta3/java/scaffold/domain/repositories/AlunoLegacyDao.java
  - Tests added / updated:
    - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImplPrepareInsertTest.java
    - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImplTest.java

- TEST VERIFICATION STATUS:
  - [x] LegacyDaoImplPrepareInsertTest.java
      - Verifies:
        - prepareInsert returns PreparedStatement from Connection.prepareStatement.
        - LegacyDaoImpl.pstmt private field set to same PreparedStatement (via reflection).
        - SQLException path wraps into UnsupportedOperationException with legacy message.
      - Status: added and executed in unit test suite (local verification).
  - [x] AlunoDaoImplTest.java
      - Verifies:
        - AlunoDaoImpl.inserirAluno uses legacyDao.prepareInsert(...) for INSERT.
        - Parameter binding correctness (trimmed strings).
        - LocalDate -> java.sql.Date conversion for dataNascimento binding.
        - Null dataNascimento binds via setNull for DATE type.
        - legacyDao.connect("oracle") and legacyDao.disconnect() lifecycle calls.
      - Status: added/updated and executed in unit test suite (local verification).

- QUICK LINKS (for reviewers):
  - LegacyDaoImpl.prepareInsert implementation:
    - file: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImpl.java
    - search for method: public PreparedStatement prepareInsert(String sql)
  - Adapter delegation & legacy message wrapping:
    - file: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapter.java
    - search for method: public PreparedStatement prepareInsert(String insert)
  - AlunoDaoImpl insertion (consuming prepareInsert):
    - file: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImpl.java
    - search for method: public int inserirAluno(Aluno aluno, String ipCliente, String tipo)
  - Test verifying prepareInsert:
    - file: src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImplPrepareInsertTest.java
  - Test verifying insertion behavior:
    - file: src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImplTest.java

- VERIFICATION NOTES / DECISIONS:
  // TODO: (REVIEW) Tests currently use reflection to assert internal 'pstmt' state in LegacyDaoImpl. Consider exposing package-private test hooks or redesigning to avoid reflection if tests become brittle.
  // TODO: (SECURITY) Ensure CI runners are configured with H2 datasource properties to allow prepareInsert integration test if added later.
  - Decision: Keep legacy-style unchecked exception messages for prepareInsert to minimize behavioral diffs and to match existing higher-level adapter semantics expected by migrated code.
  - Decision: Always call legacyDao.connect("oracle") in AlunoDaoImpl.inserirAluno prior to prepareInsert to align with legacy DB routing; fallback to default DataSource if vendor driver is unavailable.

- ACTION ITEMS (follow-ups):
  - [ ] Add an integration test that executes a real INSERT against H2 with legacy-like schema to validate end-to-end mapping and transactional behavior.
  - [ ] Add deprecation warnings/logging in LegacyDaoAdapter.prepareInsert to help identify runtime usages still relying on adapter state.
  - [ ] Replace remaining call sites that rely on adapter.pstmt/rs state and void-style prepareUpdate shims.

Change recorded by migration tool on: 2025-10-23T00:00:00Z
// NOTE: Timestamp is indicative of migration action time and can be updated by automated pipeline when committing changes.

# -------------------------------------------------------------------
# MIGRATION_CHECKLIST: STATUS
# -------------------------------------------------------------------

- Completed major migration steps related to PreparedStatement preparation and adapter shims.
- Remaining work:
  - Expand LegacyDao interface to higher-level safe helpers.
  - Migrate callers away from adapter stateful usage and void-style shims.
  - Add deprecation logging and track runtime usage to prioritize removals.

# -------------------------------------------------------------------
# NEW ENTRY: Migration of executarQuery -> LegacyDao.executeQuery
# -------------------------------------------------------------------

- [x] Task: Migrate legacy DAO method executarQuery(...) into the new LegacyDao.executeQuery abstraction and adapter flow.
  - WHY: Centralize raw query execution, preserve legacy semantics (store stmt/rs in DAO instance, wrap SQLExceptions into unchecked exceptions with legacy message), and enable gradual migration of callers to the LegacyDao abstraction or to JdbcTemplate/RowMapper.
  - WHEN: performed during executarQuery migration step.
  - WHO: migration script / developer.

Changes performed (files created/modified)
1. Verified/ensured interface declaration:
   - src/main/java/br/com/meta3/java/scaffold/domain/services/LegacyDao.java
     - Confirmed method declared:
       ResultSet executeQuery(String sql) throws SQLException;
   - Decision comment:
     // TODO: (REVIEW) Consider providing a higher-level helper that returns mapped results rather than exposing ResultSet directly.

2. Implemented executeQuery in LegacyDaoImpl:
   - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImpl.java
     - Behavior:
       - Ensures connection exists (connect(null) fallback to Spring-managed DataSource).
       - Creates Statement via Connection.createStatement(), executes sql and stores Statement and ResultSet in instance fields 'stmt' and 'rs'.
       - Returns the ResultSet to the caller.
       - Logs detailed context on SQLException and wraps it into UnsupportedOperationException with the legacy message "Erro ao realizar transação com o banco de dados!" to preserve legacy error semantics.
     - Decision comments added:
       // TODO: (REVIEW) Returning raw ResultSet increases risk of resource leaks; consider offering a handler-based API (e.g., RowCallbackHandler) in future refactors.
       // NOTE: Preserved legacy behaviour: fields 'stmt' and 'rs' are assigned to mimic original DAO stateful behaviour and to minimize changes required in migrated callers.

3. Implemented adapter delegations and legacy message preservation:
   - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapter.java
     - Method: executarQuery(String query)
       - Delegates to LegacyDao.executeQuery(query)
       - Stores returned ResultSet in adapter.rs to preserve legacy adapter instance state
       - Catches RuntimeException/SQLException and wraps into UnsupportedOperationException with message "Erro ao realizar transação com o banco de dados!" to match legacy semantics expected by higher-level code.
     - Decision comments:
       // TODO: (REVIEW) Instrument adapter to emit deprecation warnings when used so runtime call sites can be discovered for migration.

4. Updated legacy callers to use LegacyDao abstraction / adapter:
   - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImpl.java
     - Where legacy code previously used Statement/ResultSet via direct Connection, updated to call legacyDao.executeQuery(...) or legacyDao.executePreparedQuery(...) as appropriate, and to rely on LegacyDao lifecycle connect/disconnect to manage resources.
     - Decision comment:
       // TODO: (REVIEW) Gradually replace ResultSet usage with JdbcTemplate/RowMapper to improve readability and resource safety.

5. Tests added/updated to validate behavior:
   - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImplExecuteQueryTest.java
     - Tests:
       - executeQuery returns ResultSet produced by Statement.executeQuery and sets internal 'stmt' and 'rs' fields.
       - executeQuery wraps SQLException from Connection.createStatement() into UnsupportedOperationException and leaves stmt/rs null.
       - executeQuery wraps SQLException from Statement.executeQuery(...) into UnsupportedOperationException and leaves rs null while stmt remains set.
     - Decision comments:
       // NOTE: Tests use reflection to validate private field assignments; consider exposing package-private test hooks to avoid reflection in future.

   - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapterExecutarQueryTest.java
     - Tests:
       - adapter.executarQuery returns the ResultSet produced by LegacyDao.executeQuery and stores it in adapter.rs
       - adapter.executarQuery wraps runtime exceptions from LegacyDao into UnsupportedOperationException with legacy message "Erro ao realizar transação com o banco de dados!"
     - Decision comments:
       // NOTE: Simulate underlying runtime exceptions because LegacyDaoImpl often wraps SQLExceptions into unchecked exceptions.

Risk / Security / Maintenance notes
- // TODO: (REVIEW) Exposing java.sql.ResultSet to service/controller layers encourages manual resource handling; prioritize migration to JdbcTemplate RowMapper or service-level data mapping to avoid leaks.
- // TODO: (SECURITY) Ensure callers do not inline untrusted input into SQL strings passed to executeQuery; prefer parameterized queries and PreparedStatements when user input is involved.
- // TODO: (MAINTENANCE) Storing Statement/ResultSet as instance fields preserves legacy semantics but places burden on callers to call disconnect(); consider providing AutoCloseable wrappers or helper utilities to enforce cleanup.

Files touched (summary)
- Modified: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImpl.java
  - Implemented executeQuery(...) with Statement creation, rs/storing, logging and exception wrapping.
- Modified: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapter.java
  - Implemented executarQuery(String query) delegating to LegacyDao.executeQuery and preserving adapter.rs; wrapped exceptions for legacy semantics.
- Modified: src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImpl.java
  - Updated callers to delegate raw queries to LegacyDao.executeQuery / adapter.executarQuery and rely on legacyDao.connect/disconnect lifecycle.
- Created/Verified tests:
  - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImplExecuteQueryTest.java
  - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapterExecutarQueryTest.java

Tracking / Next steps
- [ ] Replace direct ResultSet processing throughout infrastructure with JdbcTemplate RowMapper where possible to reduce boilerplate and resource leak risk.
- [ ] Add an integration test that validates disconnect() closes stmt/rs/conn under normal and error flows.
- [ ] Consider adding a lightweight Result wrapper with AutoCloseable semantics returned by LegacyDao to make callers less error-prone.
- [ ] Add deprecation logging in LegacyDaoAdapter.executarQuery to help discover legacy call sites and prioritize migration.

Change log (entry)
- Entry: executeQuery migration completed
  - Modified files: LegacyDaoImpl.java (executeQuery), LegacyDaoAdapter.java (executarQuery), AlunoDaoImpl.java (call-site updates)
  - Tests: LegacyDaoImplExecuteQueryTest.java and LegacyDaoAdapterExecutarQueryTest.java added/verified
  - Notes:
    // Decision: preserve legacy behavior (instance 'stmt' and 'rs' fields & wrapping into UnsupportedOperationException with the legacy message) to ensure minimal changes for ported code expecting legacy semantics.
    // Decision: Use connect(null) fallback to Spring-managed DataSource when no explicit dbType supplied to ease local development and CI tests.

# -------------------------------------------------------------------
# NEW ENTRY: executarQuery migration - quick reference & verification
# -------------------------------------------------------------------

- SUMMARY:
  - Quick reference for the executarQuery -> LegacyDao.executeQuery migration, showing involved files and test coverage.

- FILES INVOLVED:
  - Implementation / Infra:
    - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImpl.java (executeQuery)
    - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapter.java (executarQuery wrapper)
    - src/main/java/br/com/meta3/java/scaffold/infrastructure/repositories/AlunoDaoImpl.java (updated callers to use LegacyDao)
  - Domain / Abstraction:
    - src/main/java/br/com/meta3/java/scaffold/domain/services/LegacyDao.java (executeQuery declaration)
  - Tests:
    - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoImplExecuteQueryTest.java
    - src/test/java/br/com/meta3/java/scaffold/infrastructure/repositories/LegacyDaoAdapterExecutarQueryTest.java

- TEST VERIFICATION STATUS:
  - [x] LegacyDaoImplExecuteQueryTest.java
    - Verifies success and multiple failure modes; uses reflection to assert internal 'stmt' and 'rs' field assignments.
  - [x] LegacyDaoAdapterExecutarQueryTest.java
    - Verifies adapter stores ResultSet, and wraps runtime exceptions into UnsupportedOperationException with the legacy message.

- VERIFICATION NOTES:
  // TODO: (REVIEW) Tests currently rely on reflection to assert internal state. Consider replacing reflection with package-private test helpers or providing test-only accessors to reduce brittleness.
  - Decision: Keep legacy-style unchecked exception messages for executeQuery to minimize behavioral diffs and to match tests and existing higher-level adapter semantics.

- ACTION ITEMS:
  - [ ] Create integration test verifying resource close semantics for executeQuery/disconnect.
  - [ ] Start incremental migration of callers to JdbcTemplate RowMapper to remove direct ResultSet handling.
  - [ ] Add monitoring (logs/metrics) to find runtime usage of LegacyDaoAdapter.executarQuery for prioritizing migration.

Change recorded by migration tool on: 2025-10-23T00:00:00Z
// TODO: (REVIEW) Evaluate providing safer API in LegacyDao to avoid direct ResultSet exposure; e.g., executeQuery(String sql, ResultSetHandler handler).

# -------------------------------------------------------------------
# MIGRATION_CHECKLIST: FINAL STATUS
# -------------------------------------------------------------------

- Completed: executePreparedQuery, prepareInsert, prepareUpdate shim, and executeQuery migrations with adapters and tests.
- Remaining/Planned:
  - Introduce safer, higher-level LegacyDao helpers or migrate call sites to JdbcTemplate/NamedParameterJdbcTemplate.
  - Deprecate adapter stateful shims once call sites are migrated.
  - Add integration tests for resource cleanup and end-to-end legacy DB interactions.

# End of MIGRATION_CHECKLIST